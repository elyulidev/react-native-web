import type { CurriculumTopic } from "@/types/types";

export const conference18: CurriculumTopic = {
	id: "conf-18",
	title: "Conf. 18: Drizzle ORM e Kit",
	content: [
		{ type: "heading", text: "Primeiros Passos com Drizzle e Expo" },
		{
			type: "paragraph",
			text: "Este guia assume familiaridade com o Expo SQLite, uma biblioteca que fornece acesso a um banco de dados que pode ser consultado atravÃ©s de uma API SQLite.",
		},
		{ type: "divider" },

		{
			type: "subtitle",
			text: "Passo 1: Configurar um projeto a partir de um template do Expo",
		},
		{
			type: "code",
			language: "bash",
			code: "npx create-expo-app --template blank-typescript\npnpm create expo-app --template blank-typescript",
		},

		{ type: "subtitle", text: "Estrutura de arquivos bÃ¡sica" },
		{
			type: "paragraph",
			text: "ApÃ³s instalar o template e adicionar a pasta `db`, vocÃª encontrarÃ¡ o seguinte conteÃºdo: No arquivo `db/schema.ts` com as definiÃ§Ãµes das tabelas do Drizzle. A pasta `drizzle` contÃ©m arquivos de migraÃ§Ã£o SQL e snapshots.",
		},
		{
			type: "code",
			language: "bash",
			code: `
ðŸ“¦ <project root>
 â”œ ðŸ“‚ assets
 â”œ ðŸ“‚ drizzle
 â”œ ðŸ“‚ db
 â”‚  â”” ðŸ“œ schema.ts
 â”œ ðŸ“œ .gitignore
 â”œ ðŸ“œ .npmrc
 â”œ ðŸ“œ app.json
 â”œ ðŸ“œ App.tsx
 â”œ ðŸ“œ babel.config.ts
 â”œ ðŸ“œ drizzle.config.ts
 â”œ ðŸ“œ package.json
 â”” ðŸ“œ tsconfig.json
`,
		},

		{ type: "subtitle", text: "Passo 2: Instalar o pacote `expo-sqlite`" },
		{ type: "code", language: "bash", code: "npx expo install expo-sqlite" },
		{
			type: "callout",
			alertType: "warning",
			text: "O suporte da Web Ã© experimental e pode ser instÃ¡vel.",
		},

		{ type: "subtitle", text: "Passo 3: Instalar pacotes necessÃ¡rios" },
		{
			type: "code",
			language: "bash",
			code: "npm i drizzle-orm\nnpm i -D drizzle-kit",
		},
		{
			type: "callout",
			alertType: "warning",
			text: "Pode ser que vocÃª tambÃ©m precise instalar o babel-plugin-inline-import. Se encontrar erros relacionados Ã  importaÃ§Ã£o de arquivos .sql, instale-o com: npm install -D babel-plugin-inline-import",
		},

		{
			type: "subtitle",
			text: "Passo 4: Conectar o Drizzle ORM ao banco de dados",
		},
		{
			type: "paragraph",
			text: "Crie um arquivo App.tsx no diretÃ³rio raiz e inicialize a conexÃ£o:",
		},
		{
			type: "code",
			language: "tsx",
			code: `
import * as SQLite from 'expo-sqlite';
import { drizzle } from 'drizzle-orm/expo-sqlite';
const expo = SQLite.openDatabaseSync('db.db');
const db = drizzle(expo);`,
		},

		{ type: "subtitle", text: "Passo 5: Criar uma tabela" },
		{
			type: "paragraph",
			text: "Crie um arquivo `schema.ts` no diretÃ³rio `db` e declare sua tabela:",
		},
		{
			type: "code",
			language: "typescript",
			code: `
// db/schema.ts
import { int, sqliteTable, text } from "drizzle-orm/sqlite-core";

export const usersTable = sqliteTable("users_table", {
  id: int('id').primaryKey({ autoIncrement: true }),
  name: text('name').notNull(),
  age: int('age').notNull(),
  email: text('email').notNull().unique(),
});`,
		},

		{
			type: "subtitle",
			text: "Passo 6: Configurar o arquivo de configuraÃ§Ã£o do Drizzle",
		},
		{
			type: "paragraph",
			text: "Crie um arquivo `drizzle.config.ts` na raiz do seu projeto e adicione o seguinte conteÃºdo:",
		},
		{
			type: "code",
			language: "typescript",
			code: `
import { defineConfig } from 'drizzle-kit';
export default defineConfig({
  dialect: 'sqlite',
  driver: 'expo',
  schema: './db/schema.ts',
  out: './drizzle',
});`,
		},

		{ type: "subtitle", text: "Passo 7: Configurar o Metro" },
		{
			type: "paragraph",
			text: "Crie um arquivo `metro.config.js` na pasta raiz e adicione este cÃ³digo dentro:",
		},
		{
			type: "code",
			language: "javascript",
			code: `
// metro.config.js
const { getDefaultConfig } = require('expo/metro-config');
/** @type {import('expo/metro-config').MetroConfig} */
const config = getDefaultConfig(__dirname);
config.resolver.sourceExts.push('sql');
module.exports = config;`,
		},

		{ type: "subtitle", text: "Passo 8: Atualizar a configuraÃ§Ã£o do Babel" },
		{
			type: "code",
			language: "javascript",
			code: `
// babel.config.js
module.exports = function(api) {
  api.cache(true);
  return {
    presets: ['babel-preset-expo'],
    plugins: [["inline-import", { "extensions": [".sql"] }]] // <-- adicione isto
  };
};`,
		},

		{ type: "subtitle", text: "Passo 9: Configurar Scripts NPM" },
		{
			type: "paragraph",
			text: "Para simplificar a execuÃ§Ã£o dos comandos do Drizzle Kit, Ã© uma prÃ¡tica comum adicionÃ¡-los como scripts no seu `package.json`. Isso permite executar comandos mais curtos e garante que toda a equipe use os mesmos comandos.",
		},
		{
			type: "code",
			language: "json",
			code: `"scripts": {\n    // ... outros scripts\n    "generate": "drizzle-kit generate",\n    "migrate": "drizzle-kit migrate",\n    "studio": "drizzle-kit studio"\n},`,
		},
		{
			type: "paragraph",
			text: "Agora vocÃª pode executar `npm run generate` para criar migraÃ§Ãµes e `npm run studio` para abrir o visualizador de banco de dados do Drizzle.",
		},

		{
			type: "subtitle",
			text: "Passo 10: Aplicando alteraÃ§Ãµes ao banco de dados",
		},
		{
			type: "paragraph",
			text: "Com o Expo, vocÃª precisarÃ¡ gerar migraÃ§Ãµes usando o comando `drizzle-kit generate` (ou `npm run generate`) e depois aplicÃ¡-las em tempo de execuÃ§Ã£o usando a funÃ§Ã£o `useMigrations` do `drizzle-orm`.",
		},
		{ type: "paragraph", text: "Gerar migraÃ§Ãµes:" },
		{ type: "code", language: "bash", code: "npm run generate" },

		{
			type: "subtitle",
			text: "Passo 11: Aplicar migraÃ§Ãµes e consultar seu BD",
		},
		{
			type: "paragraph",
			text: "Vamos atualizar o arquivo `App.tsx` com a lÃ³gica de migraÃ§Ãµes e consultas para criar, ler, atualizar e excluir usuÃ¡rios.",
		},
		{
			type: "code",
			language: "tsx",
			code: `
import { Text, View } from 'react-native';
import * as SQLite from 'expo-sqlite';
import { useEffect, useState } from 'react';
import { drizzle } from 'drizzle-orm/expo-sqlite';
import { usersTable } from './db/schema';
import { useMigrations } from 'drizzle-orm/expo-sqlite/migrator';
import migrations from './drizzle/migrations';

const expo = SQLite.openDatabaseSync('db.db');
const db = drizzle(expo);

export default function App() {
  const { success, error } = useMigrations(db, migrations);
  const [items, setItems] = useState<(typeof usersTable.$inferSelect)[] | null>(null);

  useEffect(() => {
    if (!success) return;
    (async () => {
      await db.delete(usersTable);
      await db.insert(usersTable).values([
        {
            name: 'John',
            age: 30,
            email: 'john@example.com',
        },
      ]);
      const users = await db.select().from(usersTable);
      setItems(users);
    })();
  }, [success]);

  if (error) {
    return (
      <View>
        <Text>Erro de migraÃ§Ã£o: {error.message}</Text>
      </View>
    );
  }
  if (!success) {
    return (
      <View>
        <Text>MigraÃ§Ã£o em andamento...</Text>
      </View>
    );
  }
  if (items === null || items.length === 0) {
    return (
      <View>
        <Text>Vazio</Text>
      </View>
    );
  }
  return (
    <View
      style={{
        display: 'flex',
        flexDirection: 'column',
        alignItems: 'center',
        width: '100%',
        height: '100%',
        justifyContent: 'center',
      }}
    >
      {items.map((item) => (
        <Text key={item.id}>{item.email}</Text>
      ))}
    </View>
  );
}
`,
		},

		{
			type: "subtitle",
			text: "Passo 12: PrÃ©-compilar e executar o app do Expo",
		},
		{ type: "code", language: "bash", code: "npx run start" },

		{ type: "divider" },

		{
			type: "subtitle",
			text: "Passo 13: ConsideraÃ§Ãµes de Desenvolvimento vs. ProduÃ§Ã£o",
		},
		{
			type: "paragraph",
			text: "Ã‰ importante entender como gerenciamos o banco de dados nos diferentes ambientes:",
		},
		{
			type: "list",
			items: [
				{
					text: "**Desenvolvimento**",
					subItems: [
						"`drizzle-kit` Ã© uma dependÃªncia de desenvolvimento (`-D`), nÃ£o Ã© incluÃ­do na aplicaÃ§Ã£o final.",
						"Usamos `npm run generate` para criar migraÃ§Ãµes cada vez que mudamos o esquema.",
						"As migraÃ§Ãµes sÃ£o aplicadas em tempo de execuÃ§Ã£o ao iniciar a app.",
						"O Drizzle Studio (`npm run studio`) Ã© a nossa ferramenta para depurar e visualizar os dados.",
					],
				},
				{
					text: "**ProduÃ§Ã£o**",
					subItems: [
						"`drizzle-orm` Ã© uma dependÃªncia de produÃ§Ã£o, Ã© essencial para que a app funcione.",
						"As migraÃ§Ãµes devem ser aplicadas automaticamente quando o utilizador abre a aplicaÃ§Ã£o pela primeira vez ou a atualiza.",
						"NÃ£o se deve armazenar informaÃ§Ã£o altamente sensÃ­vel no banco de dados local sem encriptaÃ§Ã£o.",
					],
				},
			],
		},
	],
};
